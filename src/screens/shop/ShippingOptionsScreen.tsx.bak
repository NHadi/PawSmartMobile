import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  Modal,
  ActivityIndicator,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { useNavigation, useRoute, RouteProp } from '@react-navigation/native';
import { StackNavigationProp } from '@react-navigation/stack';
import { MaterialIcons, Ionicons } from '@expo/vector-icons';
import { Colors } from '../../constants/colors';
import { Typography } from '../../constants/typography';
import { Spacing, BorderRadius } from '../../constants/spacing';
import { HomeStackParamList } from '../../navigation/types';
import kiriminAjaService, { ShippingService as KiriminAjaShippingService } from '../../services/shipping/kiriminAjaService';
import addressServiceAPI, { Address } from '../../services/addressServiceAPI';

type NavigationProp = StackNavigationProp<HomeStackParamList, 'ShippingOptions'>;
type RoutePropType = RouteProp<HomeStackParamList, 'ShippingOptions'>;

interface ShippingService {
  id: string;
  name: string;
  price: number;
  estimatedDays: string;
  apiService?: KiriminAjaShippingService; // Store original API response
}

interface ShippingProvider {
  id: string;
  name: string;
  services: ShippingService[];
}

// Warehouse/Origin Address Configuration
// TODO: Move this to environment config or database
const WAREHOUSE_ADDRESS: Address = {
  id: 'warehouse-1',
  label: 'Warehouse Utama',
  name: 'PawSmart Warehouse',
  phone: '+62 21 1234567',
  full_address: 'Jl. Warehouse No. 1, Jakarta Pusat',
  postal_code: '10110',
  is_default: true,
  latitude: -6.2088,
  longitude: 106.8456,
  province: 'DKI Jakarta',
  city: 'Jakarta Pusat',
  district: 'Menteng',
  province_id: '31',
  city_id: '3171',
  district_id: 151, // Jakarta Pusat district ID for KiriminAja
};

export default function ShippingOptionsScreen() {
  const navigation = useNavigation<NavigationProp>();
  const route = useRoute<RoutePropType>();

  // Get params from navigation
  const currentShipping = route.params?.selectedShipping;
  const deliveryAddress = route.params?.deliveryAddress; // Get address from checkout

  const [shippingProviders, setShippingProviders] = useState<ShippingProvider[]>([]);
  const [selectedProvider, setSelectedProvider] = useState<ShippingProvider | null>(null);
  const [selectedService, setSelectedService] = useState<ShippingService | null>(null);
  const [showServiceModal, setShowServiceModal] = useState(false);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Fetch shipping rates from API
  useEffect(() => {
    fetchShippingRates();
  }, []);

  const fetchShippingRates = async () => {
    setLoading(true);
    setError(null);

    try {
      // Use passed delivery address from checkout, or fallback to default
      let customerAddress = deliveryAddress;

      if (!customerAddress) {
        console.log('No address passed, trying to get default address...');
        customerAddress = await addressServiceAPI.getDefaultAddress();
      }

      if (!customerAddress) {
        setError('Pilih alamat pengiriman terlebih dahulu di halaman checkout');
        setLoading(false);
        return;
      }

      console.log('Using delivery address:', customerAddress.district || customerAddress.city, customerAddress.city);

      // TODO: Calculate actual weight from cart items
      const totalWeight = 1000; // Default 1kg for demo

      // Check what shipping data we have available
      const hasDistrictId = !!customerAddress.district_id;
      const hasCoordinates = !!(customerAddress.latitude && customerAddress.longitude);

      if (!hasDistrictId && !hasCoordinates) {
        console.warn('Delivery address missing both district_id and coordinates:', customerAddress);
        setError('Alamat pengiriman tidak lengkap. Silakan lengkapi data lokasi (koordinat atau kecamatan).');
        setLoading(false);
        return;
      }

      console.log('Address data available:', { hasDistrictId, hasCoordinates });

      const promises: Promise<any>[] = [];

      // Fetch Express shipping ONLY if we have district_id
      if (hasDistrictId) {
        console.log('Fetching express rates from:', WAREHOUSE_ADDRESS.district, 'to:', customerAddress.district);
        const shippingRequest = {
          origin: Number(WAREHOUSE_ADDRESS.district_id),
          destination: Number(customerAddress.district_id),
          weight: totalWeight,
          insurance: 0 as 0 | 1,
        };
        promises.push(kiriminAjaService.getShippingRates(shippingRequest));
      } else {
        console.log('Skipping express rates - no district_id');
        promises.push(Promise.resolve({ status: false, results: [] }));
      }

      // Fetch Instant shipping ONLY if we have coordinates
      if (hasCoordinates) {
        console.log('Fetching instant rates with coordinates');
        const instantRequest = {
          origin: {
            lat: WAREHOUSE_ADDRESS.latitude!,
            long: WAREHOUSE_ADDRESS.longitude!,
          },
          destination: {
            lat: customerAddress.latitude!,
            long: customerAddress.longitude!,
          },
          weight: totalWeight,
          timezone: 'Asia/Jakarta',
        };
        promises.push(kiriminAjaService.getInstantRates(instantRequest));
      } else {
        console.log('Skipping instant rates - no coordinates');
        promises.push(Promise.resolve({ status: false, results: [] }));
      }

      // Fetch available shipping options
      const [expressResponse, instantResponse] = await Promise.allSettled(promises);

      const providers: ShippingProvider[] = [];

      // Process Express response
      if (expressResponse.status === 'fulfilled' && expressResponse.value.status) {
        const realExpressServices = kiriminAjaService.filterRealServices(expressResponse.value.results);
        const expressServices = kiriminAjaService.filterByGroup(realExpressServices, 'regular');

        console.log('=== EXPRESS SERVICES ===');
        console.log('Total from API:', expressResponse.value.results.length);
        console.log('After filtering:', expressServices.length);

        if (expressServices.length > 0) {
          providers.push({
            id: 'express',
            name: 'Express',
            services: expressServices.map(service => ({
              id: service.service_type,
              name: service.service_name,
              price: parseInt(service.cost),
              estimatedDays: `${service.etd} hari`,
              apiService: service,
            })),
          });
        }
      }

      // Process Instant response
      if (instantResponse.status === 'fulfilled' && instantResponse.value.status) {
        const realInstantServices = kiriminAjaService.filterRealServices(instantResponse.value.results);

        console.log('=== INSTANT SERVICES ===');
        console.log('Total from API:', instantResponse.value.results.length);
        console.log('After filtering:', realInstantServices.length);

        if (realInstantServices.length > 0) {
          providers.push({
            id: 'instant',
            name: 'Instant',
            services: realInstantServices.map(service => ({
              id: service.service_type,
              name: service.service_name,
              price: parseInt(service.cost),
              estimatedDays: `${service.etd} hari`,
              apiService: service,
            })),
          });
        }
      }

      console.log('=== FINAL PROVIDERS ===');
      console.log('Total providers:', providers.length);
      providers.forEach(p => console.log(`${p.name}: ${p.services.length} services`));

      setShippingProviders(providers);

      // Set default selection
      if (providers.length > 0) {
        const defaultProvider = providers[0];
        setSelectedProvider(defaultProvider);

        if (defaultProvider.services.length > 0) {
          setSelectedService(defaultProvider.services[0]);
        }
      }
    } catch (err) {
      console.error('Failed to fetch shipping rates:', err);
      setError('Gagal memuat opsi pengiriman. Silakan coba lagi.');
    } finally {
      setLoading(false);
    }
  };

  const handleSelectProvider = (provider: ShippingProvider) => {
    setSelectedProvider(provider);
    setShowServiceModal(true);
  };

  const handleSelectService = (service: ShippingService) => {
    setSelectedService(service);
    setShowServiceModal(false);
  };

  const handleConfirm = () => {
    if (!selectedService) return;

    // Navigate back to checkout with selected shipping option and preserve payment method
    navigation.navigate('Checkout', {
      selectedShipping: {
        id: selectedService.id,
        name: selectedService.name,
        service: selectedService.name,
        price: selectedService.price,
        estimatedDays: selectedService.estimatedDays,
      },
      selectedPayment: route.params?.selectedPayment, // Preserve payment selection
    } as any);
  };

  return (
    <SafeAreaView style={styles.container} edges={['top']}>
      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity onPress={() => navigation.goBack()}>
          <Ionicons name="chevron-back" size={24} color={Colors.text.primary} />
        </TouchableOpacity>
        <Text style={styles.headerTitle}>Pilih Jasa Pengiriman</Text>
        <View style={{ width: 24 }} />
      </View>

      {loading ? (
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color={Colors.primary.main} />
          <Text style={styles.loadingText}>Memuat opsi pengiriman...</Text>
        </View>
      ) : error ? (
        <View style={styles.errorContainer}>
          <MaterialIcons name="error-outline" size={48} color={Colors.error.main} />
          <Text style={styles.errorText}>{error}</Text>
          <TouchableOpacity style={styles.retryButton} onPress={fetchShippingRates}>
            <Text style={styles.retryButtonText}>Coba Lagi</Text>
          </TouchableOpacity>
        </View>
      ) : (
        <ScrollView showsVerticalScrollIndicator={false}>
          {/* Provider Selection */}
          <View style={styles.providerSection}>
            {shippingProviders.map((provider) => (
              <TouchableOpacity
                key={provider.id}
                style={[
                  styles.providerCard,
                  selectedProvider?.id === provider.id && styles.providerCardSelected,
                ]}
                onPress={() => handleSelectProvider(provider)}
              >
                <View style={styles.providerContent}>
                  <Text style={styles.providerName}>{provider.name}</Text>
                  <Text style={styles.providerPrice}>
                    Mulai dari Rp{provider.services[0].price.toLocaleString('id-ID')}
                  </Text>
                  {selectedProvider?.id === provider.id && selectedService && (
                    <TouchableOpacity
                      style={styles.providerExpand}
                      onPress={() => setShowServiceModal(true)}
                    >
                      <Text style={styles.expandText}>{selectedService.name}</Text>
                      <MaterialIcons name="expand-more" size={20} color={Colors.text.secondary} />
                    </TouchableOpacity>
                  )}
                </View>
                <View style={styles.radioButton}>
                  {selectedProvider?.id === provider.id ? (
                    <View style={styles.radioButtonSelected} />
                  ) : null}
                </View>
              </TouchableOpacity>
            ))}
          </View>
        </ScrollView>
      )}

      {/* Service Selection Modal */}
      <Modal
        visible={showServiceModal}
        transparent
        animationType="slide"
        onRequestClose={() => setShowServiceModal(false)}
      >
        <TouchableOpacity
          style={styles.modalOverlay}
          activeOpacity={1}
          onPress={() => setShowServiceModal(false)}
        >
          <View style={styles.modalContent}>
            <View style={styles.modalHeader}>
              <Text style={styles.modalTitle}>{selectedProvider?.name || 'Pilih Layanan'}</Text>
              <TouchableOpacity onPress={() => setShowServiceModal(false)}>
                <MaterialIcons name="close" size={24} color={Colors.text.primary} />
              </TouchableOpacity>
            </View>

            {selectedProvider?.services.map((service) => (
              <TouchableOpacity
                key={service.id}
                style={styles.serviceOption}
                onPress={() => handleSelectService(service)}
              >
                <View style={styles.serviceRadio}>
                  {selectedService?.id === service.id ? (
                    <View style={styles.serviceRadioSelected} />
                  ) : null}
                </View>
                <View style={styles.serviceInfo}>
                  <Text style={styles.serviceName}>{service.name}</Text>
                  <Text style={styles.serviceEstimate}>
                    Estimasi: {service.estimatedDays}
                  </Text>
                </View>
                <Text style={styles.servicePrice}>
                  Rp{service.price.toLocaleString('id-ID')}
                </Text>
              </TouchableOpacity>
            ))}

            <TouchableOpacity
              style={styles.modalButton}
              onPress={() => setShowServiceModal(false)}
            >
              <Text style={styles.modalButtonText}>Konfirmasi</Text>
            </TouchableOpacity>
          </View>
        </TouchableOpacity>
      </Modal>

      {/* Bottom Confirm Button */}
      <View style={styles.bottomContainer}>
        <TouchableOpacity style={styles.confirmButton} onPress={handleConfirm}>
          <Text style={styles.confirmButtonText}>Konfirmasi</Text>
        </TouchableOpacity>
      </View>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: Colors.background.secondary,
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: Spacing.base,
    paddingVertical: Spacing.md,
    backgroundColor: Colors.background.primary,
    borderBottomWidth: 1,
    borderBottomColor: Colors.border.light,
  },
  headerTitle: {
    fontSize: Typography.fontSize.lg,
    fontFamily: Typography.fontFamily.semibold,
    color: Colors.text.primary,
  },
  providerSection: {
    padding: Spacing.base,
  },
  providerCard: {
    backgroundColor: Colors.background.primary,
    borderRadius: BorderRadius.md,
    padding: Spacing.base,
    marginBottom: Spacing.md,
    flexDirection: 'row',
    alignItems: 'flex-start',
    justifyContent: 'space-between',
    borderWidth: 1,
    borderColor: Colors.border.light,
  },
  providerCardSelected: {
    borderColor: Colors.primary.main,
  },
  providerContent: {
    flex: 1,
  },
  providerName: {
    fontSize: Typography.fontSize.base,
    fontFamily: Typography.fontFamily.semibold,
    color: Colors.text.primary,
    marginBottom: Spacing.xs,
  },
  providerPrice: {
    fontSize: Typography.fontSize.sm,
    color: Colors.text.secondary,
    marginBottom: Spacing.sm,
  },
  providerExpand: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: Colors.background.secondary,
    borderRadius: BorderRadius.sm,
    paddingHorizontal: Spacing.sm,
    paddingVertical: Spacing.xs,
    marginTop: Spacing.sm,
  },
  expandText: {
    fontSize: Typography.fontSize.sm,
    color: Colors.text.secondary,
    marginRight: Spacing.xs,
  },
  radioButton: {
    width: 20,
    height: 20,
    borderRadius: 10,
    borderWidth: 2,
    borderColor: Colors.primary.main,
    justifyContent: 'center',
    alignItems: 'center',
    marginLeft: Spacing.md,
  },
  radioButtonSelected: {
    width: 12,
    height: 12,
    borderRadius: 6,
    backgroundColor: Colors.primary.main,
  },
  
  // Modal Styles
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'flex-end',
  },
  modalContent: {
    backgroundColor: Colors.background.primary,
    borderTopLeftRadius: BorderRadius.xl,
    borderTopRightRadius: BorderRadius.xl,
    paddingTop: Spacing.md,
    paddingBottom: Spacing.xl,
  },
  modalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: Spacing.base,
    paddingBottom: Spacing.md,
    borderBottomWidth: 1,
    borderBottomColor: Colors.border.light,
  },
  modalTitle: {
    fontSize: Typography.fontSize.lg,
    fontFamily: Typography.fontFamily.semibold,
    color: Colors.text.primary,
  },
  serviceOption: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: Spacing.base,
    paddingVertical: Spacing.md,
  },
  serviceRadio: {
    width: 20,
    height: 20,
    borderRadius: 10,
    borderWidth: 2,
    borderColor: Colors.primary.main,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: Spacing.md,
  },
  serviceRadioSelected: {
    width: 12,
    height: 12,
    borderRadius: 6,
    backgroundColor: Colors.primary.main,
  },
  serviceInfo: {
    flex: 1,
  },
  serviceName: {
    fontSize: Typography.fontSize.base,
    color: Colors.text.primary,
    marginBottom: Spacing.xs,
  },
  serviceEstimate: {
    fontSize: Typography.fontSize.sm,
    color: Colors.text.secondary,
  },
  servicePrice: {
    fontSize: Typography.fontSize.base,
    fontFamily: Typography.fontFamily.semibold,
    color: Colors.text.primary,
  },
  modalButton: {
    backgroundColor: Colors.primary.main,
    marginHorizontal: Spacing.base,
    marginTop: Spacing.lg,
    paddingVertical: Spacing.md,
    borderRadius: BorderRadius.full,
    alignItems: 'center',
  },
  modalButtonText: {
    color: Colors.text.white,
    fontSize: Typography.fontSize.base,
    fontFamily: Typography.fontFamily.semibold,
  },
  
  // Bottom Container
  bottomContainer: {
    backgroundColor: Colors.background.primary,
    borderTopWidth: 1,
    borderTopColor: Colors.border.light,
    paddingHorizontal: Spacing.base,
    paddingVertical: Spacing.md,
  },
  confirmButton: {
    backgroundColor: Colors.primary.main,
    paddingVertical: Spacing.md,
    borderRadius: BorderRadius.full,
    alignItems: 'center',
  },
  confirmButtonText: {
    color: Colors.text.white,
    fontSize: Typography.fontSize.base,
    fontFamily: Typography.fontFamily.semibold,
  },
  // Loading and error styles
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingVertical: Spacing.xl * 2,
  },
  loadingText: {
    marginTop: Spacing.md,
    fontSize: Typography.fontSize.base,
    color: Colors.text.secondary,
  },
  errorContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingHorizontal: Spacing.xl,
    paddingVertical: Spacing.xl * 2,
  },
  errorText: {
    fontSize: Typography.fontSize.base,
    color: Colors.text.secondary,
    textAlign: 'center',
    marginTop: Spacing.md,
    marginBottom: Spacing.lg,
  },
  retryButton: {
    backgroundColor: Colors.primary.main,
    paddingHorizontal: Spacing.xl,
    paddingVertical: Spacing.md,
    borderRadius: BorderRadius.full,
  },
  retryButtonText: {
    color: Colors.text.white,
    fontSize: Typography.fontSize.base,
    fontFamily: Typography.fontFamily.semibold,
  },
});